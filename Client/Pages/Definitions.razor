@page "/definitions"
@attribute [Authorize]
@inject HttpClientX http

<div class="container">

    @if (Nodes == null)
    {
        <Loading />
    }
    else
    {
        <button class="btn btn-secondary" @onclick="AddNode">Add Node</button>

        <div class="mt-5">
            @foreach (var item in Nodes)
            {
                <NodeDefinition Node="item" RemoveNode="NodeRemoved" />
            }
        </div>

        @if (loading)
        {
            <Loading />
        }
        else
        {
            <div class="mt-5">
                <button class="btn btn-primary" @onclick="Save">Save</button>
            </div>
        }
    }
</div>


@code {

    List<NetworkNode> Nodes;
    bool loading;

    protected override async Task OnInitializedAsync()
    {
        Nodes = await http.GetFromJsonAsync<List<NetworkNode>>("Nodes/List");
    }

    private void AddNode()
    {
        Nodes.Add(new NetworkNode());
    }

    private async Task Save()
    {
        loading = true;
        await http.PostAsJsonAsync("Nodes/Save", Nodes);
        loading = false;
    }

    private void NodeRemoved(NetworkNode node)
    {
        Nodes.Remove(node);
    }
}
