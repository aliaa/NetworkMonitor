@page "/login"
@page "/login/{state}"
@inject AuthenticationStateProvider _auth
@inject NavigationManager nav
@inject HttpClientX http

<div class="container mt-4">
    <h3>Login</h3>
    <EditForm Model="model" OnValidSubmit="CheckLogin">
        <DataAnnotationsValidator />
        <div class="row mt-5">
            <div class="col-lg-4 col-sm-8">
                <div class="form-group">
                    <Label For="@(()=> model.Username)" />
                    <InputText type="text" @bind-Value="model.Username" class="form-control" style="direction:ltr;" />
                </div>
                <div class="form-group">
                    <Label For="@(() => model.Password)" />
                    <InputText type="password" @bind-Value="model.Password" class="form-control" style="direction:ltr;" />
                </div>
                <ValidationSummary />
                <div class="form-group">
                    <input type="submit" class="btn btn-primary" value="Login" />
                    @if (unauthorized)
                    {
                        <span class="ml-4 text-danger">Wrong username or password!</span>
                    }
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public string state { get; set; }
    private LoginVM model = new LoginVM();
    private bool unauthorized = false;

    protected override async Task OnInitializedAsync()
    {
        if (state == "out")
        {
            var auth = (AuthStateProvider)_auth;
            await auth.Logout();
        }
    }

    private async Task CheckLogin(EditContext editContext)
    {
        var auth = (AuthStateProvider)_auth;
        var user = await auth.Login(model);
        if (user != null)
        {
            nav.NavigateTo("/");
        }
        unauthorized = user == null;
    }
}
